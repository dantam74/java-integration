package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import se.sveaekonomi.webpay.integration.config.ConfigurationProvider;
import se.sveaekonomi.webpay.integration.exception.SveaWebPayException;

/**
 * creditTransaction can be used to credit transactions. Only transactions that
 * have reached the status SUCCESS can be credited.
 * 
 * @author Kristian Grossman-Madsen
 */
public class CreditTransactionRequest extends HostedAdminRequest {

	public String transactionId;
	public long creditAmount;	// centesimal
	
	public long getCreditAmount() {
		return creditAmount;
	}
	public void setCreditAmount(long creditAmount) {
		this.creditAmount = creditAmount;
	}
	public String getTransactionId() {
		return transactionId;
	}
	public void setTransactionId(String transactionId) {
		this.transactionId = transactionId;
	}	
	

	public CreditTransactionRequest( ConfigurationProvider config ) {
		super( config, "credit" );
	}

    /** 
     * returns xml for hosted webservice "credit" request
     */
	public String getRequestMessageXml() {
		
	    XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			XMLStreamWriter xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");

			xmlw.writeStartDocument("UTF-8", "1.0");
			xmlw.writeComment("Message generated by Integration package Java");
			xmlw.writeStartElement("credit");			
				xmlw.writeStartElement("transactionid");
					xmlw.writeCharacters( this.transactionId );
				xmlw.writeEndElement();
				xmlw.writeStartElement("amounttocredit");
					xmlw.writeCharacters( String.valueOf(this.getCreditAmount()) );
				xmlw.writeEndElement();
			xmlw.writeEndElement();			
			xmlw.writeEndDocument();			
			xmlw.close();				
		}
		catch (XMLStreamException e) {
			throw new SveaWebPayException("Error when building XML", e);
		}	

		try {
			return new String(os.toByteArray(), "UTF-8");
		}
		catch (UnsupportedEncodingException e) {
				throw new SveaWebPayException("Unsupported encoding UTF-8", e);
		}
	}
//
//	public AnnulTransactionResponse doRequest() throws IllegalStateException, IOException {
//
//		// prepare request fields
//    	Hashtable<String, String> requestFields = this.prepareRequest();
//    	
//    	// do request to Svea
//		String endpoint = this.config.getEndPoint(PAYMENTTYPE.HOSTED_ADMIN).toString().concat( this.method );
//		
//		CloseableHttpClient client = HttpClients.createDefault();
//		HttpPost post = new HttpPost(endpoint);				
//
//		List<NameValuePair> params = new ArrayList<NameValuePair>();
//		params.add(new BasicNameValuePair("message", requestFields.get("message")));
//		params.add(new BasicNameValuePair("mac", requestFields.get("mac")));
//		params.add(new BasicNameValuePair("merchantid", requestFields.get("merchantid")));
//		
//		post.setEntity( new UrlEncodedFormEntity(params) );
//				
//		// receive response
//		/**
//		 * Used by getPaymentUrl() to parse the HttpClient request response from Svea, returning service the xml response as a string 
//		 */
//		ResponseHandler<String> rh = new ResponseHandler<String>() {
//		
//			@Override
//			public String handleResponse( final HttpResponse response ) throws IOException {
//				StatusLine statusLine = response.getStatusLine();
//				HttpEntity entity = response.getEntity();
//		
//				if( statusLine.getStatusCode() >= 300 ) {
//					throw new HttpResponseException( statusLine.getStatusCode(), statusLine.getReasonPhrase() );
//				}
//				if( entity == null ) {
//					throw new ClientProtocolException("Response contains no centent");
//				}
//				
//				BufferedReader br = new BufferedReader( new InputStreamReader(entity.getContent()) );
//		 
//				StringBuffer sb = new StringBuffer();
//				String line = "";
//				while ((line = br.readLine()) != null) {
//					sb.append(line);
//				}	    
//				return sb.toString();
//			};	
//		};	
//		
//		String xmlResponse = client.execute(post, rh);
//
//		String messageInBase64 = getResponseMessageFromXml( xmlResponse );
//				
//		// parse response message into AnnulTransactionResponse
//		AnnulTransactionResponse parsedResponse = 
//			new AnnulTransactionResponse(
//				messageInBase64, 
//				this.config.getSecretWord(PAYMENTTYPE.HOSTED,this.getCountryCode())
//			)
//		;	
//		return parsedResponse;
//	}
//	
//	/** extracts <message> node contents from xml string */	
//	private String getResponseMessageFromXml(String xml) {
//	    
//	    String message = null;
//		
//		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
//
//		try {
//			DocumentBuilder builder = factory.newDocumentBuilder();
//			Document d1 = builder.parse(new InputSource(new StringReader(xml)));
//			NodeList nodeList = d1.getElementsByTagName("response");
//			int size = nodeList.getLength();
//
//			for (int i = 0; i < size; i++) {
//				Element element = (Element) nodeList.item(i);
//							
//				message = getTagValue(element, "message");								
//			}
//		} catch (ParserConfigurationException e) {
//			throw new SveaWebPayException("ParserConfigurationException", e);
//		} catch (SAXException e) {
//			throw new SveaWebPayException("SAXException", e);
//		} catch (IOException e) {
//			throw new SveaWebPayException("IOException", e);
//		}		
//		
//		return message;
//	}
//	
//    protected String getTagValue(Element elementNode, String tagName) {
//        NodeList nodeList = elementNode.getElementsByTagName(tagName);
//        Element element = (Element) nodeList.item(0);
//        
//        if (element != null && element.hasChildNodes()) {
//            NodeList textList = element.getChildNodes();
//            return ((Node) textList.item(0)).getNodeValue().trim();
//        }
//        
//        return null;
//    }	

}
