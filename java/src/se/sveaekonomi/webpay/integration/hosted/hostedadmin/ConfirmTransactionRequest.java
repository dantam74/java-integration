package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Hashtable;

import javax.xml.bind.ValidationException;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import se.sveaekonomi.webpay.integration.Requestable;
import se.sveaekonomi.webpay.integration.Respondable;
import se.sveaekonomi.webpay.integration.exception.SveaWebPayException;
import se.sveaekonomi.webpay.integration.hosted.payment.PaymentMethodPayment;
import se.sveaekonomi.webpay.integration.order.handle.CancelOrderBuilder;
import se.sveaekonomi.webpay.integration.order.handle.DeliverOrderBuilder;
import se.sveaekonomi.webpay.integration.order.validator.HostedOrderValidator;
import se.sveaekonomi.webpay.integration.order.validator.IdentityValidator;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.AnnulTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.ConfirmTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.HostedAdminResponse;
import se.sveaekonomi.webpay.integration.util.constant.COUNTRYCODE;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTMETHOD;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTTYPE;

public class ConfirmTransactionRequest extends HostedAdminRequest<DeliverOrderBuilder> implements Requestable {
	
	public ConfirmTransactionRequest( DeliverOrderBuilder orderbuilder ) {
		super(orderbuilder, "confirm");	
	}
	
	@Override
	public ConfirmTransactionResponse doRequest() {
		// HERE -- call parent doRequest, make sure to return correct type, having parsed the response
		return super.doRequest();
	}
	
	/**
	 * validates that all required attributes needed for the request are present in the builder object
	 * @return indicating which methods are missing, or empty String if no problems found
	 */
	public String validateOrder() {
		String errors = "";		
		errors += validateOrderId((DeliverOrderBuilder)this.order);
		errors += validateCountryCode((DeliverOrderBuilder)this.order);
		errors += validateCaptureDate((DeliverOrderBuilder)this.order);
		return errors;
	}
	
    private String validateOrderId(DeliverOrderBuilder order) {
    	return (order.getOrderId() == 0L) ? "MISSING VALUE - setOrderId is required.\n" : "";	// orderId is long, i.e. initialised as 0
    }
   
    private String validateCountryCode(DeliverOrderBuilder order) {
        return (order.getCountryCode() == null) ? "MISSING VALUE - CountryCode is required, use setCountryCode(...).\n" : "";
    }
    
    private String validateCaptureDate(DeliverOrderBuilder order) {
        return (order.getCaptureDate() == null) ? "MISSING VALUE - setOrderId is required.\n" : "";
    }


    /**
	 * returns xml for hosted webservice "confirm" request
	 */
	public String getRequestMessageXml() {

		XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			XMLStreamWriter xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");

			xmlw.writeStartDocument("UTF-8", "1.0");
				xmlw.writeComment("Message generated by Integration package Java");
				xmlw.writeStartElement("confirm");
					xmlw.writeStartElement("transactionid");
						xmlw.writeCharacters( String.valueOf( ((DeliverOrderBuilder)this.order).getOrderId() ) );
					xmlw.writeEndElement();
					xmlw.writeStartElement("capturedate");
						xmlw.writeCharacters( ((DeliverOrderBuilder)this.order).getCaptureDate() );
					xmlw.writeEndElement();
				xmlw.writeEndElement();
			xmlw.writeEndDocument();
			xmlw.close();
		} catch (XMLStreamException e) {
			throw new SveaWebPayException("Error when building XML", e);
		}

		try {
			return new String(os.toByteArray(), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			throw new SveaWebPayException("Unsupported encoding UTF-8", e);
		}
	}
	
	// parse response message into AnnulTransactionResponse
	@SuppressWarnings("unchecked")
	public ConfirmTransactionResponse parseResponse(String message) {
		return new ConfirmTransactionResponse(message, this.config.getSecretWord(PAYMENTTYPE.HOSTED, this.order.getCountryCode()));
	}

	@Override
	@SuppressWarnings("unchecked")
	public Hashtable<String,String> prepareRequest() {		
		return super.prepareRequest();
	}
	
}
