package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Hashtable;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import se.sveaekonomi.webpay.integration.Requestable;
import se.sveaekonomi.webpay.integration.config.ConfigurationProvider;
import se.sveaekonomi.webpay.integration.exception.SveaWebPayException;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.ConfirmTransactionResponse;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTTYPE;

public class ConfirmTransactionRequest extends HostedAdminRequest implements Requestable {
	
    /** Required. */
	public String transactionId;
	
    /** Required. Use ISO-8601 extended date format (YYYY-MM-DD) */
	public String captureDate;

	
	public String getCaptureDate() {
		return captureDate;
	}

	public void setCaptureDate(String captureDate) {
		this.captureDate = captureDate;
	}

	public String getTransactionId() {
		return transactionId;
	}

	public void setTransactionId(String transactionId) {
		this.transactionId = transactionId;
	}

	public ConfirmTransactionRequest( ConfigurationProvider config ) {
		super(config, "confirm");	
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ConfirmTransactionResponse doRequest() {
		return super.doRequest();
	}
	
	/**
	 * validates that all required attributes needed for the request are present in the builder object
	 * @return indicating which methods are missing, or empty String if no problems found
	 */
	public String validateOrder() {
		String errors = "";		
		errors += validateOrderId();
		errors += validateCountryCode();
		return errors;
	}
	
    private String validateOrderId() {
    	return (this.getTransactionId() == null) ? "MISSING VALUE - setOrderId is required.\n" : "";	// orderId is long, i.e. initialised as 0
    }
   
    private String validateCountryCode() {
        return (this.getCountryCode() == null) ? "MISSING VALUE - CountryCode is required, use setCountryCode(...).\n" : "";
    }

    /**
	 * returns xml for hosted webservice "confirm" request
	 */
	public String getRequestMessageXml() {

		XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			XMLStreamWriter xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");

			xmlw.writeStartDocument("UTF-8", "1.0");
				xmlw.writeComment("Message generated by Integration package Java");
				xmlw.writeStartElement("confirm");
					xmlw.writeStartElement("transactionid");
						xmlw.writeCharacters( this.getTransactionId() );
					xmlw.writeEndElement();
					xmlw.writeStartElement("capturedate");
						xmlw.writeCharacters( this.getCaptureDate() );
					xmlw.writeEndElement();
				xmlw.writeEndElement();
			xmlw.writeEndDocument();
			xmlw.close();
		} catch (XMLStreamException e) {
			throw new SveaWebPayException("Error when building XML", e);
		}

		try {
			return new String(os.toByteArray(), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			throw new SveaWebPayException("Unsupported encoding UTF-8", e);
		}
	}
	
	@SuppressWarnings("unchecked")
	public ConfirmTransactionResponse parseResponse(String message) {
		return new ConfirmTransactionResponse(message, this.config.getSecretWord(PAYMENTTYPE.HOSTED, this.getCountryCode()));
	}

	@Override
	@SuppressWarnings("unchecked")
	public Hashtable<String,String> prepareRequest() {		
		return super.prepareRequest();
	}
	
}
