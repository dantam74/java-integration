package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;

import javax.xml.bind.ValidationException;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;

import se.sveaekonomi.webpay.integration.Respondable;
import se.sveaekonomi.webpay.integration.config.ConfigurationProvider;
import se.sveaekonomi.webpay.integration.exception.SveaWebPayException;
import se.sveaekonomi.webpay.integration.order.handle.DeliverOrderRowsBuilder;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.AnnulTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.ConfirmTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.HostedAdminResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.LowerTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.QueryTransactionResponse;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTTYPE;
import se.sveaekonomi.webpay.integration.util.security.Base64Util;
import se.sveaekonomi.webpay.integration.util.security.HashUtil;
import se.sveaekonomi.webpay.integration.util.security.HashUtil.HASHALGORITHM;

/**
 * lowerTransaction modifies the amount in an existing card transaction 
 * having status AUTHORIZED or CONFIRMED. If the amount is lowered by an 
 * amount equal to the transaction authorized amount, then after a 
 * successful request the transaction will get the status ANNULLED.
 * 
 * @author Kristian Grossman-Madsen
 */
public class LowerTransactionRequest extends HostedAdminRequest <LowerTransactionRequest> {

    /** Required. */
	public String transactionId;
	
    /** Required. Use minor currency (i.e. 1 SEK => 100 in minor currency) */
	public Integer amountToLower;
	
    /** Optional. Iff true, doRequest() will perform a confirm request following a successful loweramount request */
	public Boolean alsoDoConfirm;

	public LowerTransactionRequest setTransactionId(String transactionId) {
		this.transactionId = transactionId;
		return this;
	}
	
	public String getTransactionId() {
		return transactionId;
	}

	public LowerTransactionRequest setAmountToLower(Integer amountToLower) {
		this.amountToLower = amountToLower;
		return this;
	}	
	
	public double getAmountToLower() {
		return amountToLower;
	}

	public LowerTransactionRequest setAlsoDoConfirm(Boolean alsoDoConfirm) {
		this.alsoDoConfirm = alsoDoConfirm;
		return this;
	}
	
	public Boolean getAlsoDoConfirm() {
		return alsoDoConfirm;
	}

	public LowerTransactionRequest(ConfigurationProvider config) {
		super(config, "loweramount");
		this.alsoDoConfirm = false;
	}
	
	/**
	 * validates that all required attributes needed for the request are present in the builder object
	 * @return indicating which methods are missing, or empty String if no problems found
	 */
	public String validateOrder() {
        String errors = "";
        if (this.getCountryCode() == null) {
            errors += "MISSING VALUE - CountryCode is required, use setCountryCode(...).\n";
        }
        
        if (this.getTransactionId() == null) {
            errors += "MISSING VALUE - OrderId is required, use setOrderId().\n";
    	}
        return errors;    
    }	

	/*
	 * returns xml for hosted webservice "loweramount" request
	 */
	public String getRequestMessageXml() {

		XMLOutputFactory xmlof = XMLOutputFactory.newInstance();
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			XMLStreamWriter xmlw = xmlof.createXMLStreamWriter(os, "UTF-8");

			xmlw.writeStartDocument("UTF-8", "1.0");
				xmlw.writeComment("Message generated by Integration package Java");
				xmlw.writeStartElement("loweramount");
					xmlw.writeStartElement("transactionid");
						xmlw.writeCharacters(this.getTransactionId());
					xmlw.writeEndElement();
					xmlw.writeStartElement("amounttolower");
						xmlw.writeCharacters(Integer.toString((int)this.getAmountToLower()));						
					xmlw.writeEndElement();
				xmlw.writeEndElement();
			xmlw.writeEndDocument();
			xmlw.close();
		} catch (XMLStreamException e) {
			throw new SveaWebPayException("Error when building XML", e);
		}

		try {
			return new String(os.toByteArray(), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			throw new SveaWebPayException("Unsupported encoding UTF-8", e);
		}
	}

	/**
	 * returns the request fields to post to service
	 */
	public Hashtable<String,String> prepareRequest() {

    	// validate request and throw exception if validation fails
        String errors = validateOrder();
        
        if (!errors.equals("")) {
        	System.out.println(errors);
            throw new SveaWebPayException("Validation failed", new ValidationException(errors));
        }
        
        // build inspectable request object and return
		Hashtable<String,String> requestFields = new Hashtable<>();

		String merchantId = this.config.getMerchantId(PAYMENTTYPE.HOSTED, this.getCountryCode());
		String secretWord = this.config.getSecretWord(PAYMENTTYPE.HOSTED, this.getCountryCode());		
		
    	String xmlMessage = getRequestMessageXml();
    	String xmlMessageBase64 = Base64Util.encodeBase64String(xmlMessage);
    	String macSha512 =  HashUtil.createHash(xmlMessageBase64 + secretWord, HASHALGORITHM.SHA_512);			

    	requestFields.put("message", xmlMessageBase64);
    	requestFields.put("mac", macSha512);
    	requestFields.put("merchantid", merchantId);
    	
		return requestFields;
	}	
	
	/**
	 * validate, prepare and do request
	 * @return ConfirmTransactionResponse
	 * @throws SveaWebPayException
	 */
	public LowerTransactionResponse doRequest() throws SveaWebPayException {

		try {
			// prepare request fields
	    	Hashtable<String, String> requestFields = this.prepareRequest();

	    	// send request 
	    	String xmlResponse = sendHostedAdminRequest(requestFields);
	
	    	// parse response	
			return new LowerTransactionResponse( getResponseMessageFromXml(xmlResponse), this.config.getSecretWord(PAYMENTTYPE.HOSTED, this.getCountryCode()) );
			
	    } catch (IllegalStateException ex) {
	        throw new SveaWebPayException("IllegalStateException", ex);
	    } 
		catch (IOException ex) {
			//System.out.println(ex.toString());
			//System.out.println(((HttpResponseException)ex).getStatusCode());
	        throw new SveaWebPayException("IOException", ex);
	    }		
	}
	

//    @SuppressWarnings("unchecked")
//	@Override
//    public Respondable doRequest() throws SveaWebPayException {
//
//		// if do request
//		LowerTransactionResponse lowerTransactionResponse = doRequest();
//		
//		Respondable returnedResponse = lowerTransactionResponse;
//		// if needed, also do confirm
//		if( this.alsoDoConfirm ) {			
//			
//			ConfirmTransactionResponse confirmTransactionResponse = null;
//			// if there were an error other than 305 (i.e. assume that we tried to lower amount by 0), return a ConfirmTransactionResponse with errormessage set
//			if( (lowerTransactionResponse.isOrderAccepted() == false) &&
//				(! lowerTransactionResponse.getResultCode().startsWith("305")) ) {
//				
//				confirmTransactionResponse = new ConfirmTransactionResponse( null, null ); // new empty response
//				confirmTransactionResponse.setOrderAccepted(false);
//                confirmTransactionResponse.setResultCode( "100" );  //INTERNAL_ERROR
//                confirmTransactionResponse.setErrorMessage( "IntegrationPackage: LowerAmount request with flag alsoDoConfirm failed:" +
//            												lowerTransactionResponse.getResultCode() + " " + lowerTransactionResponse.getErrorMessage() )
//        		;
//                
//                returnedResponse = confirmTransactionResponse;
//			}
//            
//			// lowerTransaction request went well, do confirmTransaction request
//            else {
//				ConfirmTransactionRequest confirmTransactionRequest = new ConfirmTransactionRequest( this.config );
//				confirmTransactionRequest.setCountryCode( this.getCountryCode() );
//                confirmTransactionRequest.setTransactionId( this.getTransactionId() );
//                confirmTransactionRequest.setCaptureDate( String.format("%tFT%<tRZ", new Date()) ); // capture today
//                
//                confirmTransactionResponse = confirmTransactionRequest.doRequest();
//                
//                returnedResponse = confirmTransactionResponse;
//            }            
//        }        
//		return returnedResponse;
//    }
    
}
