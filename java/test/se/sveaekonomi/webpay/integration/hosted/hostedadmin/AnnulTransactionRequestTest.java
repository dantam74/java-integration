package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertThat;

import java.util.Hashtable;

import junit.framework.TestCase;

import org.junit.Before;
import org.junit.Test;

import se.sveaekonomi.webpay.integration.config.ConfigurationProvider;
import se.sveaekonomi.webpay.integration.config.SveaConfig;
import se.sveaekonomi.webpay.integration.util.constant.COUNTRYCODE;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTTYPE;

public class AnnulTransactionRequestTest extends TestCase {

	private ConfigurationProvider config;
	private AnnulTransactionRequest request;
	
	@Before
	public void setUp() {
		config = SveaConfig.getDefaultConfig();
		request = new AnnulTransactionRequest(config); 
		request.setCountryCode(COUNTRYCODE.SE);
	}
	
    @Test
    public void test_AnnulTransactionRequest_class_exists() {    	   	        
        assertThat( request, instanceOf(AnnulTransactionRequest.class) );
        assertThat( request, instanceOf(HostedAdminRequest.class) );
    }    
    
    @Test 
    public void test_getRequestMessageXml() {    	
    	this.request.setTransactionId( "123456" );    	
    	
    	String expectedXmlMessage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><annul><transactionid>123456</transactionid></annul>";
    	
    	assertEquals( request.getRequestMessageXml(), expectedXmlMessage );    
    }
    
    @Test
    public void test_prepareRequest() {
    	this.request.setTransactionId( "123456" );

		String merchantId = this.config.getMerchantId(PAYMENTTYPE.HOSTED, request.getCountryCode());
		//String secretWord = this.config.getSecretWord(PAYMENTTYPE.HOSTED, request.getCountryCode());    	
    	
		//String expectedXmlMessage = request.getRequestMessageXml();
    	//String expectedXmlMessage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><annul><transactionid>123456</transactionid></annul>";
    	//String expectedXmlMessageBase64 = Base64Util.encodeBase64String(expectedXmlMessage);
    	String expectedXmlMessageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48IS0tTWVzc2FnZSBnZW5lcmF0ZWQgYnkgSW50ZWdyYXRpb24gcGFja2FnZSBKYXZhLS0+PGFubnVsPjx0cmFuc2FjdGlvbmlkPjEyMzQ1NjwvdHJhbnNhY3Rpb25pZD48L2FubnVsPg==";
    	//String expectedMacSha512 =  HashUtil.createHash(expectedXmlMessageBase64 + secretWord, HASHALGORITHM.SHA_512);
    	String expectedMacSha512 = "cdaf459e5245cf74967faea8cdf4dbf45fb3dc10e37e15c28186b9670371dc9aeb1e2fb1f984788025b43403499273630742cf1e7812bb3076e400fa48cd25e3";    	
    	
    	Hashtable<String, String> requestFields = this.request.prepareRequest();
    	assertEquals( requestFields.get("message"), expectedXmlMessageBase64 );
    	assertEquals( requestFields.get("mac"), expectedMacSha512 );
    	assertEquals( requestFields.get("merchantid"), merchantId );
    }
}
