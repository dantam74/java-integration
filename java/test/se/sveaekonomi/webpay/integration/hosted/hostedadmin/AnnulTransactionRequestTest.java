package se.sveaekonomi.webpay.integration.hosted.hostedadmin;

import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertThat;

import java.util.Hashtable;

import junit.framework.TestCase;

import org.junit.Before;
import org.junit.Test;

import se.sveaekonomi.webpay.integration.config.SveaConfig;
import se.sveaekonomi.webpay.integration.order.handle.CancelOrderBuilder;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.AnnulTransactionResponse;
import se.sveaekonomi.webpay.integration.response.hosted.hostedadmin.HostedAdminResponse;
import se.sveaekonomi.webpay.integration.util.constant.COUNTRYCODE;
import se.sveaekonomi.webpay.integration.util.constant.PAYMENTTYPE;

public class AnnulTransactionRequestTest extends TestCase {

	private CancelOrderBuilder order;
	private AnnulTransactionRequest request;
	
	@Before
	public void setUp() {
		order = new CancelOrderBuilder(SveaConfig.getDefaultConfig());
		order.setCountryCode(COUNTRYCODE.SE);
    	order.setTransactionId( 123456L );    	
		request = new AnnulTransactionRequest(order); 
	}
	
    @Test
    public void test_AnnulTransactionRequest_class_exists() {    	   	        
        assertThat( request, instanceOf(AnnulTransactionRequest.class) );
        assertThat( request, instanceOf(HostedAdminRequest.class) );
    }    
    
    @Test 
    public void test_getRequestMessageXml() {    	
    	
    	String expectedXmlMessage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><annul><transactionid>123456</transactionid></annul>";
    	
    	assertEquals( expectedXmlMessage, request.getRequestMessageXml() );    
    }
    
    @Test
    public void test_prepareRequest() {

		String merchantId = this.order.getConfig().getMerchantId(PAYMENTTYPE.HOSTED, request.getCountryCode());
		//String secretWord = this.config.getSecretWord(PAYMENTTYPE.HOSTED, request.getCountryCode());    	
    	
		//String expectedXmlMessage = request.getRequestMessageXml();
    	//String expectedXmlMessage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--Message generated by Integration package Java--><annul><transactionid>123456</transactionid></annul>";
    	//String expectedXmlMessageBase64 = Base64Util.encodeBase64String(expectedXmlMessage);
    	String expectedXmlMessageBase64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48IS0tTWVzc2FnZSBnZW5lcmF0ZWQgYnkgSW50ZWdyYXRpb24gcGFja2FnZSBKYXZhLS0+PGFubnVsPjx0cmFuc2FjdGlvbmlkPjEyMzQ1NjwvdHJhbnNhY3Rpb25pZD48L2FubnVsPg==";
    	//String expectedMacSha512 =  HashUtil.createHash(expectedXmlMessageBase64 + secretWord, HASHALGORITHM.SHA_512);
    	String expectedMacSha512 = "cdaf459e5245cf74967faea8cdf4dbf45fb3dc10e37e15c28186b9670371dc9aeb1e2fb1f984788025b43403499273630742cf1e7812bb3076e400fa48cd25e3";    	
    	
    	Hashtable<String, String> requestFields = this.request.prepareRequest();
    	assertEquals( expectedXmlMessageBase64, requestFields.get("message") );
    	assertEquals( expectedMacSha512, requestFields.get("mac") );
    	assertEquals( merchantId, requestFields.get("merchantid") );
    }
    
    @Test
    public void test_doRequest_returns_AnnulTransactionResponse_failure() {
    	
    	AnnulTransactionResponse response = this.request.doRequest();

    	assertThat( response, instanceOf(AnnulTransactionResponse.class) );
        assertThat( response, instanceOf(HostedAdminResponse.class) );
          
        // if we receive an error from the service, the integration test passes
        assertFalse( response.isOrderAccepted() );
    	assertEquals( response.getResultCode(), "128 (NO_SUCH_TRANS)" );      	
    }
    
    @Test
    public void manual_test_doRequest_returns_AnnulTransactionResponse_success() {	// TODO replace with webdriver test
    	this.request.setTransactionId( "584534" );
    	
    	AnnulTransactionResponse response = this.request.doRequest();

    	assertThat( response, instanceOf(AnnulTransactionResponse.class) );
        assertThat( response, instanceOf(HostedAdminResponse.class) );
          
        // if we receive an error from the service, the integration test passes
        assertTrue( response.isOrderAccepted() );
        assertEquals( response.getTransactionId(), "584534" );
    	assertEquals( response.getCustomerRefNo(), "test_1405694000814" );      	
	}        
    
}
